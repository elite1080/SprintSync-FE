import React from 'react';
import { AISuggestion } from '../../types';
import Button from '../common/Button';
import { X, Sparkles, Copy, Check } from 'lucide-react';
import { useState } from 'react';

interface AISuggestionPanelProps {
  suggestion: AISuggestion;
  onClose: () => void;
}

const AISuggestionPanel: React.FC<AISuggestionPanelProps> = ({ suggestion, onClose }) => {
  const [copied, setCopied] = useState(false);

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(suggestion.content);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy text:', error);
    }
  };

  const getSuggestionTitle = (type: AISuggestion['type']): string => {
    switch (type) {
      case 'task_description':
        return 'AI-Generated Task Description';
      case 'daily_plan':
        return 'AI Daily Plan Suggestion';
      default:
        return 'AI Suggestion';
    }
  };

  const getSuggestionIcon = (type: AISuggestion['type']): React.ReactNode => {
    switch (type) {
      case 'task_description':
        return <Sparkles className="h-5 w-5 text-blue-500" />;
      case 'daily_plan':
        return <Sparkles className="h-5 w-5 text-green-500" />;
      default:
        return <Sparkles className="h-5 w-5 text-purple-500" />;
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center p-6 border-b border-gray-200">
          <div className="flex items-center space-x-3">
            {getSuggestionIcon(suggestion.type)}
            <h2 className="text-xl font-semibold text-gray-900">
              {getSuggestionTitle(suggestion.type)}
            </h2>
          </div>
          <Button
            variant="secondary"
            size="sm"
            onClick={onClose}
            className="p-1 h-8 w-8"
          >
            <X className="h-4 w-4" />
          </Button>
        </div>

        <div className="p-6 space-y-4">
          {suggestion.confidence && (
            <div className="flex items-center space-x-2 text-sm text-gray-600">
              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              <span>Confidence: {Math.round(suggestion.confidence * 100)}%</span>
            </div>
          )}

          <div className="bg-gray-50 rounded-lg p-4 border border-gray-200">
            <div className="prose max-w-none">
              <p className="text-gray-800 whitespace-pre-wrap leading-relaxed">
                {suggestion.content}
              </p>
            </div>
          </div>

          <div className="flex justify-between items-center pt-4 border-t border-gray-200">
            <div className="text-sm text-gray-500">
              Generated by AI â€¢ {new Date().toLocaleString()}
            </div>
            
            <div className="flex space-x-3">
              <Button
                variant="secondary"
                size="sm"
                onClick={handleCopy}
                className="flex items-center space-x-2"
              >
                {copied ? (
                  <>
                    <Check className="h-4 w-4 text-green-500" />
                    <span>Copied!</span>
                  </>
                ) : (
                  <>
                    <Copy className="h-4 w-4" />
                    <span>Copy</span>
                  </>
                )}
              </Button>
              
              <Button
                onClick={onClose}
                className="flex items-center space-x-2"
              >
                Close
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AISuggestionPanel;
